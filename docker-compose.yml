# docker compose file for running a 3-node PostgreSQL cluster
# with 3-node etcd cluster as the DCS and one haproxy node
#
# requires a patroni image build from the Dockerfile:
# $ docker build -t patroni .
# The cluster could be started as:
# $ docker-compose up -d
# You can read more about it in the:
# https://github.com/zalando/patroni/blob/master/docker/README.md
version: "2"

networks:
    demo:

services:
    # etcd1: &etcd
    #     image: ${PATRONI_TEST_IMAGE:-patroni}
    #     networks: [ demo ]
    #     environment:
    #         ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
    #         ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
    #         ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
    #         ETCD_INITIAL_CLUSTER_STATE: new
    #         ETCD_INITIAL_CLUSTER_TOKEN: tutorial
    #         ETCD_UNSUPPORTED_ARCH: arm64
    #     container_name: demo-etcd1
    #     hostname: etcd1
    #     command: etcd -name etcd1 -initial-advertise-peer-urls http://etcd1:2380

    # etcd2:
    #     <<: *etcd
    #     container_name: demo-etcd2
    #     hostname: etcd2
    #     command: etcd -name etcd2 -initial-advertise-peer-urls http://etcd2:2380

    # etcd3:
    #     <<: *etcd
    #     container_name: demo-etcd3
    #     hostname: etcd3
    #     command: etcd -name etcd3 -initial-advertise-peer-urls http://etcd3:2380

    zookeeper-1:
        networks: [ demo ]
        image: zookeeper
        hostname: zookeeper-1
        container_name: zookeeper-1
        ports:
            - "2181:2181"
            - "2888:2888"
            - "3888:3888"
        environment:
            ZOOKEEPER_SERVER_ID: 1
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_PEER_PORT: 2888
            ZOOKEEPER_LEADER_PORT: 3888
            ZOOKEEPER_SERVERS: "localhost:2888:3888;zookeeper-1:12888:13888;zookeeper-2:22888:23888"

    zookeeper-2:
        networks: [ demo ]
        image: zookeeper
        hostname: zookeeper-2
        container_name: zookeeper-2
        ports:
            - "12181:12181"
            - "12888:12888"
            - "13888:13888"
        environment:
            ZOOKEEPER_SERVER_ID: 2
            ZOOKEEPER_CLIENT_PORT: 12181
            ZOOKEEPER_PEER_PORT: 12888
            ZOOKEEPER_LEADER_PORT: 13888
            ZOOKEEPER_SERVERS: "zookeeper-1:2888:3888;localhost:12888:13888;zookeeper-2:22888:23888"

    zookeeper-3:
        networks: [ demo ]
        image: zookeeper
        hostname: zookeeper-3
        container_name: zookeeper-3
        ports:
            - "22181:22181"
            - "22888:22888"
            - "23888:23888"
        environment:
            ZOOKEEPER_SERVER_ID: 3
            ZOOKEEPER_CLIENT_PORT: 22181
            ZOOKEEPER_PEER_PORT: 22888
            ZOOKEEPER_LEADER_PORT: 23888
            ZOOKEEPER_SERVERS: "zookeeper-1:2888:3888;zookeeper-2:12888:13888;localhost:22888:23888"

    haproxy:
        image: ${PATRONI_TEST_IMAGE:-patroni}
        networks: [ demo ]
        env_file: docker/patroni.env
        hostname: haproxy
        container_name: demo-haproxy
        ports:
            - "5000:5000"
            - "5001:5001"
        command: haproxy
        environment: &haproxy_env
            # ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
            # PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
            # PATRONI_SCOPE: demo
            PATRONI_ZOOKEEPER_HOSTS: "zookeeper-1:2181"
            PATRONI_SCOPE: demo

    patroni1:
        image: ${PATRONI_TEST_IMAGE:-patroni}
        networks: [ demo ]
        env_file: docker/patroni.env
        hostname: patroni1
        container_name: demo-patroni1
        environment:
            <<: *haproxy_env
            PATRONI_NAME: patroni1

    patroni2:
        image: ${PATRONI_TEST_IMAGE:-patroni}
        networks: [ demo ]
        env_file: docker/patroni.env
        hostname: patroni2
        container_name: demo-patroni2
        environment:
            <<: *haproxy_env
            PATRONI_NAME: patroni2

    patroni3:
        image: ${PATRONI_TEST_IMAGE:-patroni}
        networks: [ demo ]
        env_file: docker/patroni.env
        hostname: patroni3
        container_name: demo-patroni3
        environment:
            <<: *haproxy_env
            PATRONI_NAME: patroni3
